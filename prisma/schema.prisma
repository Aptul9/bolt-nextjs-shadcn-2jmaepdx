generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum SubscriptionType {
  Slots
  Unlimited
  H24
}

model Tenant {
  id               String           @id @default(uuid()) @db.Uuid
  subscriptionType SubscriptionType
  expiresAt        DateTime
  ownerId          String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  users      User[]
  usersInfo  UserInfo[]
  accessLogs AccessLog[]

  @@map("tenants")
}

model User {
  id             String   @id @default(uuid()) @db.Uuid
  tenantId       String   @db.Uuid
  expiresAt      DateTime
  name           String
  remainingSlots Int? // Changed from access_left for clarity
  status         Boolean  @default(true) // Active/Inactive status
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  tenant     Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userInfo   UserInfo?
  accessLogs AccessLog[]

  @@map("users")
}

model UserInfo {
  userId           String    @id @db.Uuid
  tenantId         String    @db.Uuid
  birthDate        DateTime?
  address          String?   @db.Text
  email            String?
  phoneNumber      String?
  birthPlace       String?
  ssn              String?
  nationality      String?
  gender           String?
  emergencyContact String?
  notes            String?   @db.Text
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("users_info")
}

model AccessLog {
  id        String   @id @default(uuid()) @db.Uuid
  timestamp DateTime @default(now())
  tenantId  String   @db.Uuid
  userId    String   @db.Uuid
  door      Int?

  createdAt DateTime @default(now())

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("access_logs")
}
