generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model Tenant {
  id               String                 @id @default(uuid()) @db.Uuid
  expiresAt        DateTime
  ownerId          String                 @db.Uuid
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  subscriptionType TenantSubscriptionType
  accessLogs       AccessLog[]
  Device           Device[]
  TenantInfo       TenantInfo?
  users            User[]
  usersInfo        UserInfo[]

  @@map("tenants")
}

model User {
  id               String               @id @default(uuid()) @db.Uuid
  tenantId         String               @db.Uuid
  expiresAt        DateTime
  name             String
  remainingSlots   Int?
  status           Boolean              @default(true)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  subscriptionType UserSubscriptionType
  cardid           String?              @db.VarChar
  accessLogs       AccessLog[]
  tenant           Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userInfo         UserInfo?

  @@map("users")
}

model UserInfo {
  userId           String    @id @db.Uuid
  tenantId         String    @db.Uuid
  birthDate        DateTime?
  address          String?
  email            String?
  phoneNumber      String?
  birthPlace       String?
  ssn              String?
  nationality      String?
  gender           String?
  emergencyContact String?
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  tenant           Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("users_info")
}

model AccessLog {
  id        String   @id @default(uuid()) @db.Uuid
  timestamp DateTime @default(now())
  tenantId  String   @db.Uuid
  userId    String   @db.Uuid
  door      Int?
  createdAt DateTime @default(now())
  success   Boolean  @default(true)
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("access_logs")
}

model TenantInfo {
  id          String   @id @db.Uuid
  address     String?
  vatNumber   String?  @db.VarChar(100)
  documents   String?
  phoneNumber String?  @db.VarChar(50)
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenant      Tenant   @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("tenant_info")
}

model Device {
  id        String   @id @default(uuid()) @db.Uuid
  tenantId  String   @db.Uuid
  accessKey String   @unique @db.Uuid
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("devices")
}

enum UserSubscriptionType {
  Slots
  Unlimited
  H24
}

enum TenantSubscriptionType {
  Standard
  Premium
}
